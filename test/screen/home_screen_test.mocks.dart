// Mocks generated by Mockito 5.0.14 from annotations
// in moviedb/test/screen/home_screen_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:moviedb/core/models/async_state.dart' as _i2;
import 'package:moviedb/core/models/movie.dart' as _i6;
import 'package:moviedb/core/models/movie_detail.dart' as _i10;
import 'package:moviedb/core/services/movie_service.dart' as _i9;
import 'package:moviedb/movie/widgets/popular/popular_movies_view_model.dart'
    as _i8;
import 'package:moviedb/movie/widgets/upcoming/upcoming_movies_view_model.dart'
    as _i3;
import 'package:state_notifier/state_notifier.dart' as _i7;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeAsyncState_0<T> extends _i1.Fake implements _i2.AsyncState<T> {}

/// A class which mocks [UpcomingMoviesViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpcomingMoviesViewModel extends _i1.Mock
    implements _i3.UpcomingMoviesViewModel {
  MockUpcomingMoviesViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i4.ErrorListener? _onError) =>
      super.noSuchMethod(Invocation.setter(#onError, _onError),
          returnValueForMissingStub: null);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  _i5.Stream<_i2.AsyncState<List<_i6.Movie>>> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.AsyncState<List<_i6.Movie>>>.empty())
          as _i5.Stream<_i2.AsyncState<List<_i6.Movie>>>);
  @override
  _i2.AsyncState<List<_i6.Movie>> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeAsyncState_0<List<_i6.Movie>>())
          as _i2.AsyncState<List<_i6.Movie>>);
  @override
  set state(_i2.AsyncState<List<_i6.Movie>>? value) =>
      super.noSuchMethod(Invocation.setter(#state, value),
          returnValueForMissingStub: null);
  @override
  _i2.AsyncState<List<_i6.Movie>> get debugState =>
      (super.noSuchMethod(Invocation.getter(#debugState),
              returnValue: _FakeAsyncState_0<List<_i6.Movie>>())
          as _i2.AsyncState<List<_i6.Movie>>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void loadData() => super.noSuchMethod(Invocation.method(#loadData, []),
      returnValueForMissingStub: null);
  @override
  _i4.RemoveListener addListener(
          _i7.Listener<_i2.AsyncState<List<_i6.Movie>>>? listener,
          {bool? fireImmediately = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addListener, [listener], {#fireImmediately: fireImmediately}),
          returnValue: () {}) as _i4.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PopularMoviesViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularMoviesViewModel extends _i1.Mock
    implements _i8.PopularMoviesViewModel {
  MockPopularMoviesViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i4.ErrorListener? _onError) =>
      super.noSuchMethod(Invocation.setter(#onError, _onError),
          returnValueForMissingStub: null);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  _i5.Stream<_i2.AsyncState<List<_i6.Movie>>> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.AsyncState<List<_i6.Movie>>>.empty())
          as _i5.Stream<_i2.AsyncState<List<_i6.Movie>>>);
  @override
  _i2.AsyncState<List<_i6.Movie>> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeAsyncState_0<List<_i6.Movie>>())
          as _i2.AsyncState<List<_i6.Movie>>);
  @override
  set state(_i2.AsyncState<List<_i6.Movie>>? value) =>
      super.noSuchMethod(Invocation.setter(#state, value),
          returnValueForMissingStub: null);
  @override
  _i2.AsyncState<List<_i6.Movie>> get debugState =>
      (super.noSuchMethod(Invocation.getter(#debugState),
              returnValue: _FakeAsyncState_0<List<_i6.Movie>>())
          as _i2.AsyncState<List<_i6.Movie>>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i4.RemoveListener addListener(
          _i7.Listener<_i2.AsyncState<List<_i6.Movie>>>? listener,
          {bool? fireImmediately = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addListener, [listener], {#fireImmediately: fireImmediately}),
          returnValue: () {}) as _i4.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MovieService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieService extends _i1.Mock implements _i9.MovieService {
  MockMovieService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i6.Movie>> getPopularMovie(int? page) =>
      (super.noSuchMethod(Invocation.method(#getPopularMovie, [page]),
              returnValue: Future<List<_i6.Movie>>.value(<_i6.Movie>[]))
          as _i5.Future<List<_i6.Movie>>);
  @override
  _i5.Future<List<_i6.Movie>> getUpcoming(int? page, int? pageSize) =>
      (super.noSuchMethod(Invocation.method(#getUpcoming, [page, pageSize]),
              returnValue: Future<List<_i6.Movie>>.value(<_i6.Movie>[]))
          as _i5.Future<List<_i6.Movie>>);
  @override
  _i5.Future<List<_i10.MovieDetail>> getDetailMovie(int? id) =>
      (super.noSuchMethod(Invocation.method(#getDetailMovie, [id]),
              returnValue:
                  Future<List<_i10.MovieDetail>>.value(<_i10.MovieDetail>[]))
          as _i5.Future<List<_i10.MovieDetail>>);
  @override
  _i5.Future<List<_i10.MovieCredit>> getCredits(int? id) =>
      (super.noSuchMethod(Invocation.method(#getCredits, [id]),
              returnValue:
                  Future<List<_i10.MovieCredit>>.value(<_i10.MovieCredit>[]))
          as _i5.Future<List<_i10.MovieCredit>>);
  @override
  _i5.Future<List<_i10.MovieVideos>> getVideos(int? id) =>
      (super.noSuchMethod(Invocation.method(#getVideos, [id]),
              returnValue:
                  Future<List<_i10.MovieVideos>>.value(<_i10.MovieVideos>[]))
          as _i5.Future<List<_i10.MovieVideos>>);
  @override
  _i5.Future<dynamic> saveFavoriteMovie(_i10.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#saveFavoriteMovie, [movie]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> deleteFavMovie(_i10.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#deleteFavMovie, [movie]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  dynamic cekMovieisFavorite(_i10.MovieDetail? movie) =>
      super.noSuchMethod(Invocation.method(#cekMovieisFavorite, [movie]));
  @override
  _i5.Future<List<_i10.MovieDetail>> getMovieList() =>
      (super.noSuchMethod(Invocation.method(#getMovieList, []),
              returnValue:
                  Future<List<_i10.MovieDetail>>.value(<_i10.MovieDetail>[]))
          as _i5.Future<List<_i10.MovieDetail>>);
  @override
  dynamic getGenereList(List<_i10.Genre>? genre) =>
      super.noSuchMethod(Invocation.method(#getGenereList, [genre]));
  @override
  String toString() => super.toString();
}
